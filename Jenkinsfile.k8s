@Library('Logs_OPT')_ 
pipeline{
    agent any
    options {
        ansiColor('xterm')
    }
    stages{
        stage('Cleanup') {
            steps {
                script{
                    logs.echoStage('Cleanup')
                    logs.echoGreen('cleaning project\'s directory')
                    sh 'pwd'
                    sh 'rm -rf ./*'
                    logs.echoYellow('cleanup of all unused docker containers, images, data')
                    sh 'docker image ls --format "{{.ID}}" sashatchern/flask-no-db --filter "dangling=false" | awk "NR>3" | xargs -I {} docker image rm -f {}'
                    logs.echoYellow('cleaunp stage has been finished')
                }
            }
            post {
                failure {
                    slackSend (color: '#FF0000', message: "FAILED: Cleanup stage failed.")
                }
            }
        }
        stage('Build') {
            steps {
                script{
                    logs.echoStage("Build the App")
                    logs.echoYellow("cloning repository")
                    logs.echoYellow("Current directory+files: ${PWD}")
                    sh "git clone https://github.com/SashaTch/Flask_app.git >/dev/null 2>&1" //cloning to workspace
                    logs.echoYellow("building the app to an image")
                    sh "ls /var/lib/jenkins/workspace/Project-k8/Flask_app"
                    sh "cd /var/lib/jenkins/workspace/Project-k8/Flask_app && docker build -f Dockerfile -t sashatchern/flask-no-db:v${env.BUILD_NUMBER} ." //dockered the file
                    logs.echoGreen("The App is ready for uploading")
                }
            }
            post {
                failure {
                    slackSend (color: '#FF0000', message: "FAILED: Build stage failed.")
                }
            }
        }
        stage('Upload') {
            steps{
                script {
                    logs.echoStage("Uploading")
                    logs.echoYellow("Uploading to Dockerhub")
                    sh "docker push sashatchern/flask-no-db:v${env.BUILD_NUMBER}"
                    logs.echoGreen("Uploaded succefully")
                }
            }
            post {
                failure {
                    slackSend (color: '#FF0000', message: "FAILED: Upload stage failed.")
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    logs.echoStage("Initialize to K8")
                    sh "sed -i 's#sashatchern/flask-no-db:v#sashatchern/flask-no-db:v${env.BUILD_NUMBER}#' ./Flask_app/k8/deployment.yml"
                    withEnv(["KUBECONFIG = /var/lib/jenkins/.kube/config"]) {
                        sh 'kubectl apply -f ./Flask_app/k8/deployment.yml'
                        sh 'kubectl apply -f ./Flask_app/k8/service.yml'
                    }
                    slackSend (color: '#00FF00', message: "Build Successful: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
                }
            }
            post {
                failure {
                    slackSend (color: '#FF0000', message: "FAILED: Initialization stage failed.")
                }
            }
        }
    }
}